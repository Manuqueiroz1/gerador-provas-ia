# === GERADOR DE PROVAS IA - VERS√ÉO COMPLETA E FUNCIONAL ===
# Mant√©m todas as funcionalidades importantes com c√≥digo limpo

import streamlit as st
import openai
import time
import os
import re
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.shared import Pt

# === CONFIGURA√á√ÉO SEGURA DA API ===
if "OPENAI_API_KEY" in st.secrets:
    OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
    ASSISTANT_ID = st.secrets["ASSISTANT_ID"]
else:
    st.error("üîë Configure suas chaves da API nas configura√ß√µes do Streamlit!")
    st.info("Acesse as configura√ß√µes do app para adicionar as chaves secretas.")
    st.stop()

openai.api_key = OPENAI_API_KEY

st.set_page_config(
    page_title="Gerador de Provas IA Completo", 
    layout="wide", 
    initial_sidebar_state="expanded",
    page_icon="üìö"
)

# === LISTA EXTENSA DE TEMAS POR S√âRIE ===
TEMAS_COMPLETOS = {
    "6¬∫ Ano": [
        "N√∫meros Naturais e Sistema Decimal", "Opera√ß√µes com N√∫meros Naturais",
        "M√∫ltiplos e Divisores", "N√∫meros Primos e Compostos",
        "Fra√ß√µes - Conceitos e Representa√ß√µes", "Opera√ß√µes com Fra√ß√µes",
        "N√∫meros Decimais", "Porcentagem B√°sica",
        "Geometria - Figuras Planas", "Per√≠metro e √Årea",
        "√Çngulos e Medidas", "Simetria",
        "Unidades de Medida", "Estat√≠stica B√°sica",
        "Gr√°ficos e Tabelas", "Probabilidade Introdut√≥ria"
    ],
    
    "7¬∫ Ano": [
        "N√∫meros Inteiros", "Opera√ß√µes com N√∫meros Inteiros",
        "N√∫meros Racionais", "Equa√ß√µes do 1¬∫ Grau",
        "Inequa√ß√µes do 1¬∫ Grau", "Raz√£o e Propor√ß√£o",
        "Regra de Tr√™s Simples", "Porcentagem",
        "Juros Simples", "Geometria - Tri√¢ngulos",
        "Quadril√°teros", "Circunfer√™ncia e C√≠rculo",
        "Constru√ß√µes Geom√©tricas", "Express√µes Alg√©bricas",
        "Mon√¥mios e Polin√¥mios", "Estat√≠stica Descritiva"
    ],
    
    "8¬∫ Ano": [
        "N√∫meros Reais", "Radicia√ß√£o",
        "Potencia√ß√£o", "Nota√ß√£o Cient√≠fica",
        "Express√µes Alg√©bricas", "Produtos Not√°veis",
        "Fatora√ß√£o", "Fra√ß√µes Alg√©bricas",
        "Equa√ß√µes do 1¬∫ Grau com uma Vari√°vel", "Sistemas de Equa√ß√µes",
        "Inequa√ß√µes", "Fun√ß√£o Afim",
        "Gr√°ficos de Fun√ß√µes", "Geometria - Congru√™ncia",
        "Teorema de Pit√°goras", "√Åreas de Figuras Planas",
        "Volume de S√≥lidos", "Transforma√ß√µes Geom√©tricas"
    ],
    
    "9¬∫ Ano": [
        "N√∫meros Reais Completos", "Pot√™ncias e Ra√≠zes",
        "Equa√ß√µes do 2¬∫ Grau", "Fun√ß√£o Quadr√°tica",
        "Inequa√ß√µes do 2¬∫ Grau", "Sistemas de Equa√ß√µes",
        "Semelhan√ßa de Tri√¢ngulos", "Rela√ß√µes M√©tricas no Tri√¢ngulo Ret√¢ngulo",
        "Trigonometria no Tri√¢ngulo Ret√¢ngulo", "Circunfer√™ncia - √Çngulos e Arcos",
        "Pol√≠gonos Regulares", "√Åreas e Volumes",
        "Estat√≠stica e Probabilidade", "Progress√µes Aritm√©ticas",
        "Progress√µes Geom√©tricas", "No√ß√µes de Matem√°tica Financeira"
    ],
    
    "1¬∫ Ano EM": [
        "Conjuntos", "Fun√ß√µes - Conceito e Defini√ß√£o",
        "Fun√ß√£o Afim", "Fun√ß√£o Quadr√°tica",
        "Fun√ß√£o Modular", "Fun√ß√£o Exponencial",
        "Logaritmos", "Fun√ß√£o Logar√≠tmica",
        "Trigonometria - Ciclo Trigonom√©trico", "Fun√ß√µes Trigonom√©tricas",
        "Equa√ß√µes Trigonom√©tricas", "Progress√µes Aritm√©ticas",
        "Progress√µes Geom√©tricas", "Matrizes",
        "Determinantes", "Sistemas Lineares",
        "An√°lise Combinat√≥ria", "Probabilidade"
    ],
    
    "2¬∫ Ano EM": [
        "Geometria Anal√≠tica - Ponto e Reta", "Dist√¢ncia entre Pontos",
        "Equa√ß√£o da Reta", "Posi√ß√µes entre Retas",
        "Circunfer√™ncia", "C√¥nicas - Elipse",
        "C√¥nicas - Par√°bola", "C√¥nicas - Hip√©rbole",
        "Polin√¥mios", "Equa√ß√µes Polinomiais",
        "N√∫meros Complexos", "Estat√≠stica Descritiva",
        "Medidas de Tend√™ncia Central", "Medidas de Dispers√£o",
        "Probabilidade Condicional", "Distribui√ß√µes de Probabilidade"
    ],
    
    "3¬∫ Ano EM": [
        "Geometria Espacial - Prismas", "Pir√¢mides",
        "Cilindros", "Cones",
        "Esferas", "Geometria de Posi√ß√£o",
        "An√°lise Combinat√≥ria Avan√ßada", "Bin√¥mio de Newton",
        "Probabilidade e Estat√≠stica", "Matem√°tica Financeira",
        "Juros Compostos", "Rendas e Amortiza√ß√µes",
        "Limites", "No√ß√µes de Derivadas",
        "Fun√ß√µes Especiais", "Revis√£o ENEM"
    ]
}

# === SISTEMA DE DETEC√á√ÉO CONTEXTUAL PARA IMAGENS ===
def detectar_necessidade_imagem(enunciado, tema):
    """Detecta automaticamente se a quest√£o precisa de imagem"""
    
    enunciado_lower = enunciado.lower()
    tema_lower = tema.lower()
    
    contexto = {
        'precisa_imagem': False,
        'tipo_imagem': None,
        'elementos': {},
        'prioridade': 'baixa'
    }
    
    # TRIGONOMETRIA
    if any(palavra in tema_lower for palavra in ['trigonometria', 'seno', 'coseno', 'tangente']):
        if any(palavra in enunciado_lower for palavra in ['tri√¢ngulo', '√¢ngulo', 'altura', 'cateto', 'hipotenusa']):
            contexto.update({
                'precisa_imagem': True,
                'tipo_imagem': 'triangulo_retangulo',
                'elementos': extrair_elementos_trigonometria(enunciado),
                'prioridade': 'alta'
            })
    
    # GEOMETRIA ANAL√çTICA
    elif any(palavra in tema_lower for palavra in ['anal√≠tica', 'coordenada', 'plano cartesiano']):
        coordenadas = extrair_coordenadas(enunciado)
        if coordenadas:
            contexto.update({
                'precisa_imagem': True,
                'tipo_imagem': 'plano_cartesiano',
                'elementos': {'pontos': coordenadas},
                'prioridade': 'alta'
            })
    
    # FUN√á√ïES
    elif any(palavra in tema_lower for palavra in ['fun√ß√£o', 'gr√°fico']):
        if 'y =' in enunciado or 'f(x)' in enunciado:
            contexto.update({
                'precisa_imagem': True,
                'tipo_imagem': 'grafico_funcao',
                'elementos': extrair_funcoes(enunciado),
                'prioridade': 'alta'
            })
    
    # GEOMETRIA PLANA
    elif any(palavra in enunciado_lower for palavra in ['quadrado', 'ret√¢ngulo', 'c√≠rculo', 'tri√¢ngulo']):
        contexto.update({
            'precisa_imagem': True,
            'tipo_imagem': 'figura_geometrica',
            'elementos': detectar_figura_geometrica(enunciado),
            'prioridade': 'm√©dia'
        })
    
    return contexto

def extrair_elementos_trigonometria(enunciado):
    """Extrai elementos de trigonometria do enunciado"""
    elementos = {}
    
    # Buscar √¢ngulos
    angulos = re.findall(r'(\d+)¬∞', enunciado)
    if angulos:
        elementos['angulos'] = [int(a) for a in angulos]
    
    # Buscar medidas
    medidas = re.findall(r'(\d+(?:\.\d+)?)\s*(?:cm|m|metros?)', enunciado)
    if medidas:
        elementos['medidas'] = [float(m) for m in medidas]
    
    # Detectar tipo de problema
    if any(palavra in enunciado.lower() for palavra in ['√°rvore', 'sombra', 'pr√©dio']):
        elementos['tipo'] = 'situacao_real'
    else:
        elementos['tipo'] = 'triangulo_generico'
    
    return elementos

def extrair_coordenadas(enunciado):
    """Extrai coordenadas do enunciado"""
    coordenadas = re.findall(r'[A-Z]?\((-?\d+,\s*-?\d+)\)', enunciado)
    pontos = []
    for coord in coordenadas:
        x, y = map(int, coord.replace(' ', '').split(','))
        pontos.append((x, y))
    return pontos

def extrair_funcoes(enunciado):
    """Extrai fun√ß√µes do enunciado"""
    funcoes = re.findall(r'y\s*=\s*([^,\n\.]+)', enunciado)
    return {'funcoes': [f.strip() for f in funcoes]}

def detectar_figura_geometrica(enunciado):
    """Detecta o tipo de figura geom√©trica"""
    enunciado_lower = enunciado.lower()
    
    if 'quadrado' in enunciado_lower:
        return {'tipo': 'quadrado'}
    elif 'ret√¢ngulo' in enunciado_lower:
        return {'tipo': 'retangulo'}
    elif 'c√≠rculo' in enunciado_lower or 'circunfer√™ncia' in enunciado_lower:
        return {'tipo': 'circulo'}
    elif 'tri√¢ngulo' in enunciado_lower:
        return {'tipo': 'triangulo'}
    else:
        return {'tipo': 'generico'}

# === GERADOR DE IMAGENS CONTEXTUAL ===
def gerar_imagem_contextual(questao_num, contexto):
    """Gera imagem baseada no contexto detectado"""
    if not contexto['precisa_imagem']:
        return None
    
    try:
        plt.ioff()  # Desabilitar modo interativo
        
        if contexto['tipo_imagem'] == 'triangulo_retangulo':
            return gerar_triangulo_retangulo(questao_num, contexto['elementos'])
        elif contexto['tipo_imagem'] == 'plano_cartesiano':
            return gerar_plano_cartesiano(questao_num, contexto['elementos'])
        elif contexto['tipo_imagem'] == 'grafico_funcao':
            return gerar_grafico_funcao(questao_num, contexto['elementos'])
        elif contexto['tipo_imagem'] == 'figura_geometrica':
            return gerar_figura_geometrica(questao_num, contexto['elementos'])
        
    except Exception as e:
        st.warning(f"Aviso: N√£o foi poss√≠vel gerar imagem para quest√£o {questao_num}: {e}")
        return None

def gerar_triangulo_retangulo(questao_num, elementos):
    """Gera imagem de tri√¢ngulo ret√¢ngulo"""
    fig, ax = plt.subplots(figsize=(8, 6))
    
    # Definir v√©rtices do tri√¢ngulo
    if elementos.get('tipo') == 'situacao_real':
        # Cen√°rio real (√°rvore, pr√©dio, etc.)
        vertices = np.array([[0, 0], [6, 0], [0, 4]])
        
        # Desenhar √°rvore/pr√©dio
        ax.plot([0, 0], [0, 4], 'g-', linewidth=6, label='Objeto')
        # Desenhar sombra
        ax.plot([0, 6], [0, 0], 'k-', linewidth=4, label='Sombra')
        # Linha de vis√£o
        ax.plot([0, 6], [4, 0], 'r--', linewidth=2, label='Linha de vis√£o')
    else:
        # Tri√¢ngulo gen√©rico
        vertices = np.array([[0, 0], [4, 0], [4, 3]])
        triangle = plt.Polygon(vertices, fill=False, edgecolor='blue', linewidth=3)
        ax.add_patch(triangle)
        
        # Marcar √¢ngulo reto
        square = plt.Rectangle((3.7, 0), 0.3, 0.3, fill=False, linewidth=2)
        ax.add_patch(square)
        
        # Labels dos lados
        ax.text(2, -0.3, 'cateto adjacente', ha='center', fontsize=10)
        ax.text(4.3, 1.5, 'cateto oposto', ha='center', fontsize=10, rotation=90)
        ax.text(1.8, 1.8, 'hipotenusa', ha='center', fontsize=10, rotation=37)
    
    # Configurar gr√°fico
    ax.set_xlim(-1, 8)
    ax.set_ylim(-1, 5)
    ax.set_aspect('equal')
    ax.grid(True, alpha=0.3)
    ax.set_title(f'Quest√£o {questao_num} - Trigonometria', fontsize=14, weight='bold')
    
    # Salvar
    filename = f"questao_{questao_num}_trigonometria.png"
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
    plt.close()
    
    return filename

def gerar_plano_cartesiano(questao_num, elementos):
    """Gera plano cartesiano com pontos"""
    fig, ax = plt.subplots(figsize=(8, 6))
    
    pontos = elementos.get('pontos', [])
    
    if pontos:
        # Definir limites baseados nos pontos
        x_coords = [p[0] for p in pontos]
        y_coords = [p[1] for p in pontos]
        
        x_min, x_max = min(x_coords) - 2, max(x_coords) + 2
        y_min, y_max = min(y_coords) - 2, max(y_coords) + 2
        
        # Plotar pontos
        for i, (x, y) in enumerate(pontos):
            ax.plot(x, y, 'ro', markersize=10)
            ax.annotate(f'({x},{y})', (x, y), xytext=(x+0.3, y+0.3), fontsize=12, weight='bold')
        
        # Se houver 2 pontos, desenhar reta
        if len(pontos) == 2:
            ax.plot([x_coords[0], x_coords[1]], [y_coords[0], y_coords[1]], 'b-', linewidth=2)
    else:
        x_min, x_max, y_min, y_max = -5, 5, -5, 5
    
    # Configurar eixos
    ax.set_xlim(x_min, x_max)
    ax.set_ylim(y_min, y_max)
    ax.grid(True, alpha=0.3)
    ax.axhline(y=0, color='k', linewidth=1)
    ax.axvline(x=0, color='k', linewidth=1)
    ax.set_xlabel('x', fontsize=12)
    ax.set_ylabel('y', fontsize=12)
    ax.set_title(f'Quest√£o {questao_num} - Plano Cartesiano', fontsize=14, weight='bold')
    
    # Salvar
    filename = f"questao_{questao_num}_cartesiano.png"
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
    plt.close()
    
    return filename

def gerar_grafico_funcao(questao_num, elementos):
    """Gera gr√°fico de fun√ß√£o"""
    fig, ax = plt.subplots(figsize=(8, 6))
    
    funcoes = elementos.get('funcoes', [])
    x = np.linspace(-10, 10, 400)
    
    for i, funcao in enumerate(funcoes):
        try:
            # Preparar fun√ß√£o para avalia√ß√£o
            funcao_eval = funcao.replace('x', '*x').replace('^', '**').replace('**x', '**2' if 'x2' in funcao else '*x')
            
            # Casos especiais
            if 'x**2' in funcao_eval or 'x¬≤' in funcao:
                y = eval(funcao_eval.replace('x¬≤', 'x**2'), {"x": x, "np": np})
            else:
                y = eval(funcao_eval, {"x": x, "np": np})
            
            ax.plot(x, y, linewidth=2, label=f'y = {funcao}')
        except:
            # Fun√ß√£o padr√£o se n√£o conseguir processar
            y = x
            ax.plot(x, y, linewidth=2, label='y = x')
    
    # Configurar gr√°fico
    ax.grid(True, alpha=0.3)
    ax.axhline(y=0, color='k', linewidth=0.5)
    ax.axvline(x=0, color='k', linewidth=0.5)
    ax.set_xlabel('x', fontsize=12)
    ax.set_ylabel('y', fontsize=12)
    ax.set_title(f'Quest√£o {questao_num} - Gr√°fico de Fun√ß√£o', fontsize=14, weight='bold')
    ax.legend()
    ax.set_xlim(-5, 5)
    ax.set_ylim(-10, 10)
    
    # Salvar
    filename = f"questao_{questao_num}_funcao.png"
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
    plt.close()
    
    return filename

def gerar_figura_geometrica(questao_num, elementos):
    """Gera figura geom√©trica baseada no tipo"""
    fig, ax = plt.subplots(figsize=(6, 6))
    
    tipo = elementos.get('tipo', 'generico')
    
    if tipo == 'quadrado':
        square = plt.Rectangle((1, 1), 3, 3, fill=False, edgecolor='blue', linewidth=3)
        ax.add_patch(square)
        ax.text(2.5, 0.5, 'Quadrado', ha='center', fontsize=12, weight='bold')
    
    elif tipo == 'retangulo':
        rect = plt.Rectangle((0.5, 1.5), 4, 2, fill=False, edgecolor='green', linewidth=3)
        ax.add_patch(rect)
        ax.text(2.5, 1, 'Ret√¢ngulo', ha='center', fontsize=12, weight='bold')
    
    elif tipo == 'circulo':
        circle = plt.Circle((2.5, 2.5), 1.5, fill=False, edgecolor='red', linewidth=3)
        ax.add_patch(circle)
        ax.text(2.5, 0.5, 'C√≠rculo', ha='center', fontsize=12, weight='bold')
    
    elif tipo == 'triangulo':
        triangle = plt.Polygon([(2.5, 4), (1, 1), (4, 1)], fill=False, edgecolor='purple', linewidth=3)
        ax.add_patch(triangle)
        ax.text(2.5, 0.5, 'Tri√¢ngulo', ha='center', fontsize=12, weight='bold')
    
    # Configurar gr√°fico
    ax.set_xlim(0, 5)
    ax.set_ylim(0, 5)
    ax.set_aspect('equal')
    ax.grid(True, alpha=0.3)
    ax.set_title(f'Quest√£o {questao_num} - Geometria', fontsize=14, weight='bold')
    
    # Salvar
    filename = f"questao_{questao_num}_geometria.png"
    plt.tight_layout()
    plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
    plt.close()
    
    return filename

# === SISTEMA DE LIMPEZA DE FORMATA√á√ÉO MATEM√ÅTICA ===
def limpar_latex(texto):
    """Remove c√≥digos LaTeX problem√°ticos"""
    
    # Remover delimitadores LaTeX
    texto = re.sub(r'\\\(([^)]*)\\\)', r'\1', texto)
    texto = re.sub(r'\\\[([^\]]*)\\\]', r'\1', texto)
    
    # Converter fra√ß√µes
    texto = re.sub(r'\\frac\{([^}]+)\}\{([^}]+)\}', r'(\1)/(\2)', texto)
    
    # Converter exponenciais
    texto = re.sub(r'\^2\b', '¬≤', texto)
    texto = re.sub(r'\^3\b', '¬≥', texto)
    texto = re.sub(r'\^{([^}]+)}', r'^(\1)', texto)
    
    # Converter s√≠mbolos comuns
    substituicoes = {
        r'\\cdot': '¬∑', r'\\times': '√ó', r'\\div': '√∑',
        r'\\pm': '¬±', r'\\pi': 'œÄ', r'\\alpha': 'Œ±',
        r'\\beta': 'Œ≤', r'\\gamma': 'Œ≥', r'\\theta': 'Œ∏',
        r'\\leq': '‚â§', r'\\geq': '‚â•', r'\\neq': '‚â†',
        r'\\sqrt\{([^}]+)\}': r'‚àö(\1)'
    }
    
    for latex, simbolo in substituicoes.items():
        texto = re.sub(latex, simbolo, texto)
    
    return texto.strip()

# === SISTEMA DE PARSING DE QUEST√ïES ===
def extrair_questoes(texto):
    """Extrai quest√µes do texto gerado pela IA"""
    questoes = []
    
    # Dividir por quest√µes
    partes = re.split(r'\n##\s*Quest√£o\s*\d*', texto)
    
    # Primeira parte √© introdu√ß√£o
    introducao = partes[0].strip() if partes else ""
    
    # Processar cada quest√£o
    for i, parte in enumerate(partes[1:], 1):
        if parte.strip():
            questao = processar_questao_individual(i, parte)
            if questao:
                questoes.append(questao)
    
    return introducao, questoes

def processar_questao_individual(numero, texto_questao):
    """Processa uma quest√£o individual"""
    questao = {
        'numero': numero,
        'enunciado': '',
        'alternativas': [],
        'resolucao': '',
        'referencia': ''
    }
    
    linhas = texto_questao.split('\n')
    secao_atual = 'enunciado'
    
    for linha in linhas:
        linha = linha.strip()
        if not linha:
            continue
            
        # Detectar se√ß√µes
        if linha.lower().startswith('**enunciado:**'):
            secao_atual = 'enunciado'
            linha = linha.replace('**Enunciado:**', '').strip()
        elif linha.lower().startswith('**alternativas:**'):
            secao_atual = 'alternativas'
            continue
        elif linha.lower().startswith('**resolu√ß√£o:**') or linha.lower().startswith('**resolucao:**'):
            secao_atual = 'resolucao'
            linha = linha.replace('**Resolu√ß√£o:**', '').replace('**Resolucao:**', '').strip()
        elif linha.lower().startswith('**refer√™ncia:**') or linha.lower().startswith('**referencia:**'):
            secao_atual = 'referencia'
            linha = linha.replace('**Refer√™ncia:**', '').replace('**Referencia:**', '').strip()
        
        # Adicionar conte√∫do √† se√ß√£o apropriada
        if linha:
            if secao_atual == 'enunciado':
                questao['enunciado'] += linha + ' '
            elif secao_atual == 'alternativas' and re.match(r'^[a-d]\)', linha):
                questao['alternativas'].append(linha)
            elif secao_atual == 'resolucao':
                questao['resolucao'] += linha + ' '
            elif secao_atual == 'referencia':
                questao['referencia'] += linha + ' '
    
    # Limpar espa√ßos extras
    for key in ['enunciado', 'resolucao', 'referencia']:
        questao[key] = questao[key].strip()
    
    return questao if questao['enunciado'] else None

# === CRIA√á√ÉO DE DOCUMENTOS SEPARADOS ===
def criar_prova_completa(introducao, questoes, serie, tema, incluir_imagens=True):
    """Cria documento com prova completa"""
    doc = Document()
    
    # Cabe√ßalho
    titulo = doc.add_heading(f'PROVA DE MATEM√ÅTICA - {serie.upper()}', 0)
    titulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    subtitulo = doc.add_paragraph(f'Tema: {tema}')
    subtitulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    doc.add_paragraph()
    
    # Dados do aluno
    info = doc.add_paragraph('Data: ___/___/_____     Nome: _________________________________     Turma: _______')
    
    # Instru√ß√µes
    if introducao:
        instrucoes = extrair_instrucoes(introducao)
        if instrucoes:
            doc.add_paragraph()
            p_inst = doc.add_paragraph(instrucoes)
            p_inst.style = 'Body Text'
    
    doc.add_paragraph()
    
    # Quest√µes
    for questao in questoes:
        # T√≠tulo da quest√£o
        p_titulo = doc.add_paragraph()
        run_num = p_titulo.add_run(f"{questao['numero']}) ")
        run_num.bold = True
        run_num.font.size = Pt(12)
        
        # Enunciado
        if questao['enunciado']:
            p_enunciado = doc.add_paragraph(questao['enunciado'])
            p_enunciado.style = 'Body Text'
        
        # Gerar imagem se necess√°rio
        if incluir_imagens:
            contexto = detectar_necessidade_imagem(questao['enunciado'], tema)
            if contexto['precisa_imagem']:
                img_file = gerar_imagem_contextual(questao['numero'], contexto)
                if img_file and os.path.exists(img_file):
                    try:
                        doc.add_paragraph()
                        doc.add_picture(img_file, width=Inches(5))
                        doc.paragraphs[-1].alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                        os.remove(img_file)  # Limpar arquivo tempor√°rio
                    except Exception as e:
                        st.warning(f"Erro ao adicionar imagem: {e}")
        
        # Alternativas
        if questao['alternativas']:
            for alt in questao['alternativas']:
                p_alt = doc.add_paragraph(alt)
                p_alt.paragraph_format.left_indent = Inches(0.5)
        
        doc.add_paragraph()  # Espa√ßo entre quest√µes
    
    return doc

def criar_gabarito_separado(questoes, serie, tema):
    """Cria documento separado com gabarito e resolu√ß√µes"""
    doc = Document()
    
    # Cabe√ßalho
    titulo = doc.add_heading(f'GABARITO E RESOLU√á√ïES - {serie.upper()}', 0)
    titulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    subtitulo = doc.add_paragraph(f'Tema: {tema}')
    subtitulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    doc.add_paragraph()
    doc.add_paragraph('Material de apoio para o professor.')
    doc.add_paragraph()
    
    # Resolu√ß√µes
    for questao in questoes:
        # Quest√£o
        p_questao = doc.add_paragraph()
        run_num = p_questao.add_run(f"Quest√£o {questao['numero']}: ")
        run_num.bold = True
        run_num.font.size = Pt(12)
        
        # Resolu√ß√£o
        if questao['resolucao']:
            doc.add_paragraph(questao['resolucao'])
        
        # Refer√™ncia
        if questao['referencia']:
            p_ref = doc.add_paragraph()
            run_ref = p_ref.add_run('Refer√™ncia: ')
            run_ref.bold = True
            p_ref.add_run(questao['referencia'])
        
        doc.add_paragraph()
    
    return doc

def criar_folha_respostas(num_questoes, serie, tema):
    """Cria folha de respostas separada"""
    doc = Document()
    
    # Cabe√ßalho
    titulo = doc.add_heading('FOLHA DE RESPOSTAS', 0)
    titulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    subtitulo = doc.add_paragraph(f'{serie} - {tema}')
    subtitulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
    
    doc.add_paragraph()
    
    # Dados do aluno
    doc.add_paragraph('Nome: _____________________________________________ Turma: _______ Data: ________')
    doc.add_paragraph()
    doc.add_paragraph('Instru√ß√µes: Marque apenas uma alternativa por quest√£o.')
    doc.add_paragraph()
    
    # Grid de respostas
    for i in range(1, num_questoes + 1):
        p = doc.add_paragraph(f'{i:2d}) ')
        for letra in ['A', 'B', 'C', 'D']:
            p.add_run(f'( {letra} ) ')
        
        # Quebra de linha a cada 10 quest√µes
        if i % 10 == 0:
            doc.add_paragraph()
    
    return doc

def extrair_instrucoes(introducao):
    """Extrai instru√ß√µes da introdu√ß√£o"""
    linhas = introducao.split('\n')
    instrucoes = []
    
    for linha in linhas:
        linha = linha.strip()
        if ('instru√ß√µes' in linha.lower() or 
            'tempo' in linha.lower() or
            'quest√µes' in linha.lower()):
            instrucoes.append(linha)
    
    return ' '.join(instrucoes)

# === PROMPT OTIMIZADO ===
def criar_prompt_otimizado(serie, tema, num_questoes, nivel_dificuldade):
    """Cria prompt otimizado para gera√ß√£o de provas"""
    
    distribuicao = calcular_distribuicao_dificuldade(num_questoes, nivel_dificuldade)
    tempo_estimado = num_questoes * 6  # 6 min por quest√£o
    
    return f"""
Crie uma prova de matem√°tica completa para {serie} sobre o tema "{tema}" com {num_questoes} quest√µes.

‚ö†Ô∏è FORMATA√á√ÉO MATEM√ÅTICA OBRIGAT√ìRIA:
- N√ÉO use c√≥digos LaTeX como \\( \\) ou \\[ \\]
- Use s√≠mbolos Unicode diretos: ¬≤, ¬≥, ‚àö, √∑, √ó, ¬±, œÄ, Œ±, Œ≤
- Para fra√ß√µes use: (a)/(b) em vez de \\frac{{a}}{{b}}
- Para exponenciais use: x¬≤ ou x^2 (sem barras invertidas)
- Para coordenadas use: A(1, 3) sem delimitadores LaTeX

‚ö†Ô∏è REFER√äNCIAS OBRIGAT√ìRIAS:
- Cada quest√£o DEVE ter uma refer√™ncia bibliogr√°fica espec√≠fica
- Use livros de matem√°tica conhecidos
- Formate as refer√™ncias em padr√£o ABNT

DISTRIBUI√á√ÉO DE DIFICULDADE:
- Quest√µes f√°ceis: {distribuicao['f√°cil']}
- Quest√µes m√©dias: {distribuicao['m√©dio']}  
- Quest√µes dif√≠ceis: {distribuicao['dif√≠cil']}

FORMATO OBRIGAT√ìRIO:

# Prova de Matem√°tica - {serie}: {tema}

**Instru√ß√µes:** Esta prova cont√©m {num_questoes} quest√µes sobre {tema}. Leia atentamente cada quest√£o antes de responder. Marque apenas uma alternativa por quest√£o.

**Tempo estimado:** {tempo_estimado} minutos

## Quest√£o 1: [Tipo - N√≠vel]
**Enunciado:** [Quest√£o aqui - SEM c√≥digos LaTeX]
**Alternativas:**
a) [Op√ß√£o A - formata√ß√£o limpa]
b) [Op√ß√£o B - formata√ß√£o limpa] 
c) [Op√ß√£o C - formata√ß√£o limpa]
d) [Op√ß√£o D - formata√ß√£o limpa]
**Resolu√ß√£o:** [Explica√ß√£o detalhada com c√°lculos limpos]
**Refer√™ncia:** [Cite livro espec√≠fico - formato ABNT completo]

[Repetir para todas as {num_questoes} quest√µes]

## REFER√äNCIAS BIBLIOGR√ÅFICAS
[Liste todas as refer√™ncias citadas, formatadas em ABNT]

CRIT√âRIOS OBRIGAT√ìRIOS:
- Cada quest√£o DEVE ter uma refer√™ncia espec√≠fica
- Formata√ß√£o matem√°tica LIMPA (sem LaTeX)
- Varie as refer√™ncias entre quest√µes
- Use apenas s√≠mbolos Unicode ou texto simples
"""

def calcular_distribuicao_dificuldade(num_questoes, nivel_dificuldade):
    """Calcula distribui√ß√£o de quest√µes por dificuldade"""
    if nivel_dificuldade == "F√°cil":
        return {"f√°cil": num_questoes, "m√©dio": 0, "dif√≠cil": 0}
    elif nivel_dificuldade == "M√©dio":
        return {"f√°cil": 0, "m√©dio": num_questoes, "dif√≠cil": 0}
    elif nivel_dificuldade == "Dif√≠cil":
        return {"f√°cil": 0, "m√©dio": 0, "dif√≠cil": num_questoes}
    else:  # Misto
        facil = max(1, num_questoes // 3)
        dificil = max(1, num_questoes // 3)
        medio = num_questoes - facil - dificil
        return {"f√°cil": facil, "m√©dio": medio, "dif√≠cil": dificil}

# === COMUNICA√á√ÉO COM OPENAI ===
def obter_resposta_openai(thread):
    """Obt√©m resposta completa do OpenAI"""
    messages = openai.beta.threads.messages.list(thread_id=thread.id)
    conteudo_completo = ""
    
    for message in messages.data:
        if message.role == "assistant":
            for content_block in message.content:
                if hasattr(content_block, 'text') and hasattr(content_block.text, 'value'):
                    conteudo_completo += content_block.text.value + "\n\n"
    
    return conteudo_completo.strip()

# === INTERFACE PRINCIPAL ===
def main():
    st.title("üìö Gerador de Provas IA - Vers√£o Completa")
    st.markdown("*Sistema inteligente com gerador de imagens contextual e downloads separados*")
    st.markdown("---")
    
    # Valida√ß√£o de configura√ß√£o
    if OPENAI_API_KEY == "sua_chave_openai_aqui":
        st.error("‚ùå Configure sua chave da API OpenAI na vari√°vel OPENAI_API_KEY!")
        st.info("üí° Edite o c√≥digo e substitua 'sua_chave_openai_aqui' pela sua chave real.")
        st.stop()
    
    # Sidebar - Configura√ß√µes
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes da Prova")
    
    # S√©rie
    serie = st.sidebar.selectbox(
        "üìñ S√©rie:",
        ["6¬∫ Ano", "7¬∫ Ano", "8¬∫ Ano", "9¬∫ Ano", "1¬∫ Ano EM", "2¬∫ Ano EM", "3¬∫ Ano EM"]
    )
    
    # Tema
    temas_disponiveis = TEMAS_COMPLETOS.get(serie, [])
    tema_selecionado = st.sidebar.selectbox("üí° Tema:", temas_disponiveis)
    
    # Tema personalizado
    tema_personalizado = st.sidebar.text_input("‚úèÔ∏è Tema personalizado (opcional):")
    tema_final = tema_personalizado.strip() if tema_personalizado.strip() else tema_selecionado
    
    # Configura√ß√µes da prova
    st.sidebar.markdown("### üéØ Configura√ß√µes")
    num_questoes = st.sidebar.slider("üìä N√∫mero de quest√µes:", 3, 15, 5)
    nivel_dificuldade = st.sidebar.selectbox(
        "‚ö° N√≠vel de Dificuldade:",
        ["F√°cil", "M√©dio", "Dif√≠cil", "Misto"]
    )
    
    # Op√ß√µes avan√ßadas
    st.sidebar.markdown("### üé® Recursos Avan√ßados")
    incluir_imagens = st.sidebar.checkbox("üñºÔ∏è Gerar imagens contextuais", value=True)
    limpar_formatacao = st.sidebar.checkbox("üßπ Limpar c√≥digos LaTeX", value=True)
    
    # Downloads separados
    st.sidebar.markdown("### üìÅ Downloads Separados")
    gerar_gabarito_separado = st.sidebar.checkbox("üìã Gabarito e resolu√ß√µes separados", value=True)
    gerar_folha_separada = st.sidebar.checkbox("üìù Folha de respostas separada", value=True)
    
    # Informa√ß√µes da prova
    tempo_estimado = num_questoes * 6
    st.sidebar.markdown("---")
    st.sidebar.info(f"**üìä Resumo:**\n"
                   f"‚Ä¢ S√©rie: {serie}\n"
                   f"‚Ä¢ Tema: {tema_final}\n"
                   f"‚Ä¢ Quest√µes: {num_questoes}\n"
                   f"‚Ä¢ N√≠vel: {nivel_dificuldade}\n"
                   f"‚Ä¢ Tempo: {tempo_estimado} min\n"
                   f"‚Ä¢ Imagens: {'‚úÖ' if incluir_imagens else '‚ùå'}")
    
    # √Årea principal
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìä Quest√µes", num_questoes)
    with col2:
        st.metric("‚è±Ô∏è Tempo", f"{tempo_estimado} min")
    with col3:
        st.metric("üéØ N√≠vel", nivel_dificuldade)
    with col4:
        st.metric("üé® Recursos", "Ativados" if incluir_imagens else "B√°sicos")
    
    # Bot√£o de gera√ß√£o
    if st.button("üöÄ Gerar Prova Completa", type="primary"):
        
        with st.spinner("üîÑ Gerando prova inteligente..."):
            try:
                # Criar prompt
                prompt = criar_prompt_otimizado(serie, tema_final, num_questoes, nivel_dificuldade)
                
                # Comunicar com OpenAI
                thread = openai.beta.threads.create()
                
                message = openai.beta.threads.messages.create(
                    thread_id=thread.id,
                    role="user", 
                    content=prompt
                )
                
                run = openai.beta.threads.runs.create(
                    thread_id=thread.id,
                    assistant_id=ASSISTANT_ID
                )
                
                # Aguardar conclus√£o
                progress_bar = st.progress(0)
                progress_text = st.empty()
                
                step = 0
                while run.status not in ["completed", "failed", "cancelled"]:
                    time.sleep(2)
                    run = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
                    step += 1
                    progress = min(step * 10, 95)
                    progress_bar.progress(progress)
                    progress_text.text(f"‚è≥ Processando... {progress}%")
                
                progress_bar.progress(100)
                progress_text.text("‚úÖ Prova gerada!")
                
                if run.status == "completed":
                    # Obter resposta
                    texto_prova = obter_resposta_openai(thread)
                    
                    if texto_prova and len(texto_prova) > 100:
                        st.success("‚úÖ Prova gerada com sucesso!")
                        
                        # Limpar formata√ß√£o se solicitado
                        if limpar_formatacao:
                            texto_prova = limpar_latex(texto_prova)
                            st.info("üßπ Formata√ß√£o matem√°tica limpa aplicada")
                        
                        # Processar quest√µes
                        introducao, questoes = extrair_questoes(texto_prova)
                        
                        if questoes:
                            st.success(f"‚úÖ {len(questoes)} quest√µes processadas com sucesso!")
                            
                            # Preview
                            st.markdown("### üìñ Preview da Prova")
                            with st.expander("Ver conte√∫do completo"):
                                st.markdown(texto_prova)
                            
                            # Gerar documentos
                            st.markdown("### üîß Gerando Documentos")
                            
                            # Prova completa
                            doc_prova = criar_prova_completa(introducao, questoes, serie, tema_final, incluir_imagens)
                            timestamp = time.strftime("%Y%m%d_%H%M%S")
                            nome_prova = f"prova_{serie.replace(' ', '_').lower()}_{tema_final.replace(' ', '_').lower()}_{timestamp}.docx"
                            doc_prova.save(nome_prova)
                            
                            documentos_gerados = []
                            documentos_gerados.append(("üìÑ Prova Completa", nome_prova))
                            
                            # Gabarito separado
                            if gerar_gabarito_separado:
                                doc_gabarito = criar_gabarito_separado(questoes, serie, tema_final)
                                nome_gabarito = f"gabarito_{serie.replace(' ', '_').lower()}_{tema_final.replace(' ', '_').lower()}_{timestamp}.docx"
                                doc_gabarito.save(nome_gabarito)
                                documentos_gerados.append(("üìã Gabarito e Resolu√ß√µes", nome_gabarito))
                            
                            # Folha de respostas
                            if gerar_folha_separada:
                                doc_folha = criar_folha_respostas(num_questoes, serie, tema_final)
                                nome_folha = f"folha_respostas_{serie.replace(' ', '_').lower()}_{tema_final.replace(' ', '_').lower()}_{timestamp}.docx"
                                doc_folha.save(nome_folha)
                                documentos_gerados.append(("üìù Folha de Respostas", nome_folha))
                            
                            # Downloads
                            st.markdown("### üìÅ Downloads Dispon√≠veis")
                            
                            cols = st.columns(len(documentos_gerados))
                            for i, (titulo, arquivo) in enumerate(documentos_gerados):
                                with cols[i]:
                                    if os.path.exists(arquivo):
                                        with open(arquivo, "rb") as file_obj:
                                            st.download_button(
                                                label=f"‚¨áÔ∏è {titulo}",
                                                data=file_obj.read(),
                                                file_name=arquivo,
                                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                                type="primary" if i == 0 else "secondary"
                                            )
                            
                            # Informa√ß√µes finais
                            st.markdown("---")
                            st.info(f"üìã **Resumo dos arquivos gerados:**\n"
                                   f"‚Ä¢ {len(questoes)} quest√µes de n√≠vel {nivel_dificuldade.lower()}\n"
                                   f"‚Ä¢ Tempo estimado: {tempo_estimado} minutos\n"
                                   f"‚Ä¢ {'Imagens contextuais inclu√≠das' if incluir_imagens else 'Apenas texto'}\n"
                                   f"‚Ä¢ {len(documentos_gerados)} documentos gerados")
                            
                        else:
                            st.error("‚ùå Nenhuma quest√£o foi encontrada no texto gerado")
                            st.text_area("Conte√∫do recebido:", texto_prova, height=200)
                    else:
                        st.error("‚ùå Conte√∫do gerado est√° vazio ou muito curto")
                else:
                    st.error(f"‚ùå Erro na gera√ß√£o: {run.status}")
                    
            except Exception as e:
                st.error(f"‚ùå Erro: {str(e)}")
                st.exception(e)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    

        ü§ñ Gerador de Provas IA - Vers√£o Completa

        ‚ú® Gerador de imagens contextual ‚Ä¢ üìö Lista extensa de temas ‚Ä¢ üîß Downloads separados
    

    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
