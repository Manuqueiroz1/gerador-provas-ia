# === GERADOR DE PROVAS IA - VERS√ÉO CORRIGIDA ===
# Mant√©m toda funcionalidade original + corre√ß√µes espec√≠ficas

import streamlit as st
import openai
import time
import os
import re
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.shared import Pt

# === CONFIGURA√á√ÉO SEGURA DA API ===
if "OPENAI_API_KEY" in st.secrets:
    OPENAI_API_KEY = st.secrets["OPENAI_API_KEY"]
    ASSISTANT_ID = st.secrets["ASSISTANT_ID"]
else:
    st.error("üîë Configure suas chaves da API nas configura√ß√µes do Streamlit!")
    st.info("Acesse as configura√ß√µes do app para adicionar as chaves secretas.")
    st.stop()

openai.api_key = OPENAI_API_KEY

st.set_page_config(
    page_title="Gerador de Provas IA Completo", 
    layout="wide", 
    initial_sidebar_state="expanded",
    page_icon="üìö"
)

# === INICIALIZAR SESSION STATE ===
if 'prova_gerada' not in st.session_state:
    st.session_state.prova_gerada = None
if 'documentos_prontos' not in st.session_state:
    st.session_state.documentos_prontos = None
if 'imagens_geradas' not in st.session_state:
    st.session_state.imagens_geradas = []

# === LISTA EXTENSA DE TEMAS POR S√âRIE ===
TEMAS_COMPLETOS = {
    "6¬∫ Ano": [
        "N√∫meros Naturais", "Opera√ß√µes B√°sicas", "Fra√ß√µes", "Decimais", 
        "Porcentagem B√°sica", "Geometria Plana B√°sica", "Per√≠metro e √Årea",
        "Unidades de Medida", "Sistema Monet√°rio", "Gr√°ficos e Tabelas",
        "M√∫ltiplos e Divisores", "N√∫meros Primos", "Express√µes Num√©ricas",
        "√Çngulos", "Pol√≠gonos", "Simetria"
    ],
    "7¬∫ Ano": [
        "N√∫meros Inteiros", "N√∫meros Racionais", "Equa√ß√µes do 1¬∫ Grau",
        "Inequa√ß√µes", "Raz√£o e Propor√ß√£o", "Regra de Tr√™s", "Porcentagem",
        "Geometria: Tri√¢ngulos", "Quadril√°teros", "Circunfer√™ncia",
        "Estat√≠stica B√°sica", "Probabilidade", "Express√µes Alg√©bricas",
        "Plano Cartesiano", "√Çngulos em Pol√≠gonos", "Teorema de Tales"
    ],
    "8¬∫ Ano": [
        "Sistemas de Equa√ß√µes Lineares", "Produtos Not√°veis", "Fatora√ß√£o",
        "Fra√ß√µes Alg√©bricas", "Fun√ß√£o do 1¬∫ Grau", "Teorema de Pit√°goras",
        "√Åreas e Volumes", "Semelhan√ßa de Tri√¢ngulos", "Rela√ß√µes M√©tricas",
        "D√≠zimas Peri√≥dicas", "Potencia√ß√£o", "Radicia√ß√£o",
        "Mon√¥mios e Polin√¥mios", "Geometria Anal√≠tica B√°sica"
    ],
    "9¬∫ Ano": [
        "Fun√ß√£o Quadr√°tica", "Equa√ß√µes do 2¬∫ Grau", "Trigonometria no Tri√¢ngulo Ret√¢ngulo",
        "Rela√ß√µes M√©tricas na Circunfer√™ncia", "Raz√µes Trigonom√©tricas",
        "Geometria Espacial", "Estat√≠stica e Probabilidade", "Progress√µes",
        "Sistemas de Inequa√ß√µes", "Fun√ß√£o Exponencial B√°sica", "Logaritmos B√°sicos",
        "Matem√°tica Financeira", "An√°lise Combinat√≥ria B√°sica", "Semelhan√ßa de Tri√¢ngulos"
    ],
    "1¬∫ Ano EM": [
        "Conjuntos", "Fun√ß√µes", "Fun√ß√£o Afim", "Fun√ß√£o Quadr√°tica",
        "Fun√ß√£o Exponencial", "Fun√ß√£o Logar√≠tmica", "Progress√µes Aritm√©ticas",
        "Progress√µes Geom√©tricas", "Trigonometria", "Geometria Plana",
        "Estat√≠stica", "An√°lise Combinat√≥ria", "Probabilidade",
        "Matem√°tica Financeira", "Sistemas Lineares"
    ],
    "2¬∫ Ano EM": [
        "Matrizes", "Determinantes", "Sistemas Lineares", "Geometria Espacial",
        "Geometria Anal√≠tica", "Circunfer√™ncia", "Elipse", "Hip√©rbole",
        "Par√°bola", "N√∫meros Complexos", "Polin√¥mios", "Equa√ß√µes Polinomiais",
        "Bin√¥mio de Newton", "Probabilidade Avan√ßada", "Estat√≠stica Avan√ßada"
    ],
    "3¬∫ Ano EM": [
        "Geometria Espacial Avan√ßada", "Geometria Anal√≠tica Espacial",
        "Limites", "Derivadas B√°sicas", "Integrais B√°sicas", "Fun√ß√µes Trigonom√©tricas",
        "An√°lise Combinat√≥ria Avan√ßada", "Probabilidade Condicional",
        "Estat√≠stica Inferencial", "Matem√°tica Financeira Avan√ßada",
        "Sequ√™ncias e S√©ries", "T√≥picos de C√°lculo"
    ]
}

# === SISTEMA DE LIMPEZA DE FORMATA√á√ÉO MATEM√ÅTICA ===
def limpar_formatacao_latex(texto):
    """Remove ou converte c√≥digos LaTeX para texto limpo"""
    
    # Remover delimitadores LaTeX
    texto = re.sub(r'\\\(([^)]*)\\\)', r'\1', texto)
    texto = re.sub(r'\\\[([^\]]*)\\\]', r'\1', texto)
    
    # Converter fra√ß√µes
    texto = re.sub(r'\\frac\{([^}]+)\}\{([^}]+)\}', r'(\1)/(\2)', texto)
    
    # Converter ra√≠zes
    texto = re.sub(r'\\sqrt\{([^}]+)\}', r'‚àö(\1)', texto)
    
    # Converter exponenciais
    texto = re.sub(r'\^2\b', '¬≤', texto)
    texto = re.sub(r'\^3\b', '¬≥', texto)
    texto = re.sub(r'\^4\b', '‚Å¥', texto)
    texto = re.sub(r'\^{2}', '¬≤', texto)
    texto = re.sub(r'\^{3}', '¬≥', texto)
    texto = re.sub(r'\^{([^}]+)}', r'^(\1)', texto)
    
    # Limpar outros s√≠mbolos LaTeX comuns
    substituicoes = {
        r'\\cdot': '¬∑',
        r'\\times': '√ó',
        r'\\div': '√∑',
        r'\\pm': '¬±',
        r'\\pi': 'œÄ',
        r'\\alpha': 'Œ±',
        r'\\beta': 'Œ≤',
        r'\\gamma': 'Œ≥',
        r'\\theta': 'Œ∏',
        r'\\leq': '‚â§',
        r'\\geq': '‚â•',
        r'\\neq': '‚â†',
        r'\\approx': '‚âà'
    }
    
    for latex, simbolo in substituicoes.items():
        texto = re.sub(latex, simbolo, texto)
    
    # Limpar espa√ßos extras
    texto = re.sub(r'\s+', ' ', texto)
    texto = texto.strip()
    
    return texto

# === SISTEMA DE AN√ÅLISE CONTEXTUAL INTELIGENTE ===
def analisar_contexto_questao_especifica(enunciado, numero_questao):
    """Analisa o contexto espec√≠fico de cada quest√£o individual"""
    
    contexto = {
        'precisa_imagem': False,
        'tipo_visualizacao': None,
        'dados_especificos': {},
        'nivel_complexidade': 'simples'
    }
    
    # Extrair dados espec√≠ficos do enunciado
    medidas = re.findall(r'(\d+(?:\.\d+)?)\s*(?:cm|metros?|km)', enunciado.lower())
    angulos = re.findall(r'(\d+)¬∞', enunciado)
    coordenadas = re.findall(r'\((-?\d+),\s*(-?\d+)\)', enunciado)
    razoes = re.findall(r'(\d+:\d+)', enunciado)
    
    # TRIGONOMETRIA - An√°lise espec√≠fica
    if any(palavra in enunciado.lower() for palavra in ['seno', 'coseno', 'tangente', 'hipotenusa', 'cateto']):
        contexto.update({
            'precisa_imagem': True,
            'tipo_visualizacao': 'triangulo_trigonometrico',
            'dados_especificos': {
                'medidas': medidas,
                'angulos': angulos,
                'tipo_problema': 'trigonometria'
            },
            'nivel_complexidade': 'detalhado'
        })
    
    # SEMELHAN√áA DE TRI√ÇNGULOS
    elif 'semelhan√ßa' in enunciado.lower() or 'semelhantes' in enunciado.lower():
        contexto.update({
            'precisa_imagem': True,
            'tipo_visualizacao': 'triangulos_semelhantes',
            'dados_especificos': {
                'medidas': medidas,
                'razoes': razoes,
                'tipo_problema': 'semelhanca'
            }
        })
    
    # GEOMETRIA ANAL√çTICA
    elif coordenadas or 'plano cartesiano' in enunciado.lower() or 'coordenadas' in enunciado.lower():
        contexto.update({
            'precisa_imagem': True,
            'tipo_visualizacao': 'plano_cartesiano',
            'dados_especificos': {
                'coordenadas': coordenadas,
                'tipo_problema': 'geometria_analitica'
            }
        })
    
    # SISTEMAS LINEARES
    elif 'sistema' in enunciado.lower() and any(op in enunciado for op in ['x +', 'y =', 'x -', 'y +']):
        contexto.update({
            'precisa_imagem': True,
            'tipo_visualizacao': 'sistema_linear',
            'dados_especificos': {
                'equacoes': extrair_equacoes(enunciado),
                'tipo_problema': 'sistema_linear'
            }
        })
    
    # FUN√á√ïES
    elif 'fun√ß√£o' in enunciado.lower() or 'f(x)' in enunciado or 'y =' in enunciado:
        contexto.update({
            'precisa_imagem': True,
            'tipo_visualizacao': 'grafico_funcao',
            'dados_especificos': {
                'funcoes': extrair_funcoes(enunciado),
                'tipo_problema': 'funcao'
            }
        })
    
    return contexto

def extrair_equacoes(texto):
    """Extrai equa√ß√µes do texto"""
    equacoes = re.findall(r'[xy]\s*[+\-]\s*[xy]?\s*=\s*\d+', texto)
    return equacoes

def extrair_funcoes(texto):
    """Extrai fun√ß√µes do texto"""
    funcoes = re.findall(r'[yf]\s*\([x]\)?\s*=\s*[^,\n\.]+', texto)
    return funcoes

# === GERADORES DE IMAGEM ESPEC√çFICOS ===
def gerar_triangulo_trigonometrico_especifico(questao_num, dados):
    """Gera tri√¢ngulo com dados espec√≠ficos da quest√£o"""
    try:
        plt.ioff()
        fig, ax = plt.subplots(figsize=(10, 8))
        
        medidas = dados.get('medidas', [])
        angulos = dados.get('angulos', [])
        
        # Usar medidas reais da quest√£o ou padr√£o
        if len(medidas) >= 2:
            base = float(medidas[0])
            altura = float(medidas[1])
        else:
            base, altura = 4, 3
        
        # V√©rtices do tri√¢ngulo ret√¢ngulo
        vertices = np.array([[0, 0], [base, 0], [base, altura]])
        triangle = plt.Polygon(vertices, fill=False, edgecolor='blue', linewidth=3)
        ax.add_patch(triangle)
        
        # V√©rtices
        ax.plot([0, base, base], [0, 0, altura], 'ro', markersize=8)
        ax.text(-0.2, -0.2, 'A', fontsize=12, weight='bold')
        ax.text(base+0.1, -0.2, 'B', fontsize=12, weight='bold')
        ax.text(base+0.1, altura+0.1, 'C', fontsize=12, weight='bold')
        
        # √Çngulo reto
        square = plt.Rectangle((base-0.3, 0), 0.3, 0.3, fill=False, linewidth=2)
        ax.add_patch(square)
        
        # √Çngulo espec√≠fico da quest√£o
        if angulos:
            angulo = float(angulos[0])
            angle_arc = patches.Arc((0, 0), 1, 1, angle=0, theta1=0, theta2=angulo, 
                                   color='red', linewidth=2)
            ax.add_patch(angle_arc)
            ax.text(0.3, 0.1, f'{angulo}¬∞', fontsize=12, color='red', weight='bold')
        
        # Labels com medidas reais
        if medidas:
            ax.text(base/2, -0.3, f'{medidas[0]} cm', ha='center', fontsize=11, weight='bold')
            if len(medidas) > 1:
                ax.text(base+0.3, altura/2, f'{medidas[1]} cm', ha='center', fontsize=11, weight='bold')
        
        # Raz√µes trigonom√©tricas
        ax.text(base/2, -0.6, 'cateto adjacente', ha='center', fontsize=10, style='italic')
        ax.text(base+0.8, altura/2, 'cateto oposto', ha='center', fontsize=10, rotation=90, style='italic')
        ax.text(base/2-0.5, altura/2+0.3, 'hipotenusa', ha='center', fontsize=10, rotation=37, style='italic')
        
        ax.set_xlim(-1, base+2)
        ax.set_ylim(-1, altura+2)
        ax.set_aspect('equal')
        ax.axis('off')
        ax.set_title(f'Quest√£o {questao_num}: Trigonometria', fontsize=14, weight='bold')
        
        filename = f"questao_{questao_num}_trigonometria.png"
        plt.tight_layout()
        plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close()
        
        return filename
        
    except Exception as e:
        print(f"Erro ao gerar imagem trigonom√©trica: {e}")
        return None

def gerar_triangulos_semelhantes_especificos(questao_num, dados):
    """Gera dois tri√¢ngulos semelhantes com dados da quest√£o"""
    try:
        plt.ioff()
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 7))
        
        medidas = dados.get('medidas', [])
        razoes = dados.get('razoes', [])
        
        # Tri√¢ngulo 1 - menor
        if len(medidas) >= 2:
            lado1, lado2 = float(medidas[0]), float(medidas[1])
        else:
            lado1, lado2 = 3, 4
        
        vertices1 = np.array([[0, 0], [lado1, 0], [lado1*0.8, lado2]])
        triangle1 = plt.Polygon(vertices1, fill=False, edgecolor='blue', linewidth=3)
        ax1.add_patch(triangle1)
        
        # Labels
        ax1.text(lado1/2, -0.3, f'{lado1} cm', ha='center', fontsize=11, weight='bold')
        ax1.text(lado1+0.3, lado2/2, f'{lado2} cm', ha='center', fontsize=11, weight='bold')
        ax1.set_title('Tri√¢ngulo ABC', fontsize=12, weight='bold')
        ax1.set_aspect('equal')
        ax1.axis('off')
        
        # Tri√¢ngulo 2 - maior (propor√ß√£o baseada na quest√£o)
        if razoes:
            razao_str = razoes[0]
            if ':' in razao_str:
                r1, r2 = razao_str.split(':')
                fator = float(r2) / float(r1)
            else:
                fator = 2
        else:
            fator = 2
        
        lado1_2, lado2_2 = lado1 * fator, lado2 * fator
        vertices2 = np.array([[0, 0], [lado1_2, 0], [lado1_2*0.8, lado2_2]])
        triangle2 = plt.Polygon(vertices2, fill=False, edgecolor='red', linewidth=3)
        ax2.add_patch(triangle2)
        
        ax2.text(lado1_2/2, -0.3, f'{lado1_2} cm', ha='center', fontsize=11, weight='bold')
        ax2.text(lado1_2+0.3, lado2_2/2, f'{lado2_2} cm', ha='center', fontsize=11, weight='bold')
        ax2.set_title('Tri√¢ngulo DEF', fontsize=12, weight='bold')
        ax2.set_aspect('equal')
        ax2.axis('off')
        
        plt.suptitle(f'Quest√£o {questao_num}: Tri√¢ngulos Semelhantes', fontsize=14, weight='bold')
        
        filename = f"questao_{questao_num}_semelhantes.png"
        plt.tight_layout()
        plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close()
        
        return filename
        
    except Exception as e:
        print(f"Erro ao gerar tri√¢ngulos semelhantes: {e}")
        return None

def gerar_plano_cartesiano_especifico(questao_num, dados):
    """Gera plano cartesiano com coordenadas espec√≠ficas"""
    try:
        plt.ioff()
        fig, ax = plt.subplots(figsize=(10, 8))
        
        coordenadas = dados.get('coordenadas', [])
        
        if coordenadas:
            # Usar coordenadas reais da quest√£o
            pontos_x = [int(coord[0]) for coord in coordenadas]
            pontos_y = [int(coord[1]) for coord in coordenadas]
            
            x_min, x_max = min(pontos_x) - 2, max(pontos_x) + 2
            y_min, y_max = min(pontos_y) - 2, max(pontos_y) + 2
        else:
            # Padr√£o se n√£o tiver coordenadas
            pontos_x, pontos_y = [1, 3], [2, 4]
            x_min, x_max, y_min, y_max = -1, 5, -1, 5
        
        ax.set_xlim(x_min, x_max)
        ax.set_ylim(y_min, y_max)
        ax.grid(True, alpha=0.3)
        ax.axhline(y=0, color='k', linewidth=1)
        ax.axvline(x=0, color='k', linewidth=1)
        
        # Plotar pontos espec√≠ficos
        for i, (x, y) in enumerate(zip(pontos_x, pontos_y)):
            ax.plot(x, y, 'ro', markersize=10)
            ax.annotate(f'({x},{y})', (x, y), xytext=(x+0.2, y+0.2), fontsize=12, weight='bold')
        
        # Se houver 2 pontos, desenhar segmento
        if len(pontos_x) == 2:
            ax.plot(pontos_x, pontos_y, 'b-', linewidth=2)
        
        ax.set_xlabel('x', fontsize=12)
        ax.set_ylabel('y', fontsize=12)
        ax.set_title(f'Quest√£o {questao_num}: Plano Cartesiano', fontsize=14, weight='bold')
        
        filename = f"questao_{questao_num}_cartesiano.png"
        plt.tight_layout()
        plt.savefig(filename, dpi=300, bbox_inches='tight', facecolor='white')
        plt.close()
        
        return filename
        
    except Exception as e:
        print(f"Erro ao gerar plano cartesiano: {e}")
        return None

def gerar_imagem_contextual_especifica(questao_num, enunciado, tema):
    """Sistema principal que decide qual tipo de imagem gerar baseado no contexto espec√≠fico"""
    
    # Analisar contexto espec√≠fico da quest√£o
    contexto = analisar_contexto_questao_especifica(enunciado, questao_num)
    
    if not contexto['precisa_imagem']:
        return None
    
    # Roteamento para gerador espec√≠fico
    try:
        if contexto['tipo_visualizacao'] == 'triangulo_trigonometrico':
            return gerar_triangulo_trigonometrico_especifico(questao_num, contexto['dados_especificos'])
        
        elif contexto['tipo_visualizacao'] == 'triangulos_semelhantes':
            return gerar_triangulos_semelhantes_especificos(questao_num, contexto['dados_especificos'])
        
        elif contexto['tipo_visualizacao'] == 'plano_cartesiano':
            return gerar_plano_cartesiano_especifico(questao_num, contexto['dados_especificos'])
        
        else:
            return None
            
    except Exception as e:
        st.warning(f"Erro ao gerar imagem para quest√£o {questao_num}: {str(e)}")
        return None

# === SISTEMA DE PARSING DE QUEST√ïES ===
def parse_questao_individual(questao_text):
    """Extrai dados de uma quest√£o individual"""
    dados = {"titulo": "", "enunciado": "", "alternativas": "", "resolucao": "", "referencia": ""}
    
    # Extrair t√≠tulo/n√∫mero da quest√£o
    titulo_match = re.search(r"##\s*Quest√£o\s*(\d+):?\s*(.*?)(?:\n|$)", questao_text, re.IGNORECASE)
    if titulo_match:
        dados["numero"] = titulo_match.group(1)
        dados["titulo"] = titulo_match.group(2).strip()
    
    # Extrair enunciado
    enunciado_match = re.search(r"\*\*Enunciado:\*\*\s*(.*?)(?=\*\*Alternativas:\*\*|\*\*Resolu√ß√£o:\*\*|\*\*Refer√™ncia:\*\*|##|$)", 
                               questao_text, re.DOTALL | re.IGNORECASE)
    if enunciado_match:
        dados["enunciado"] = enunciado_match.group(1).strip()
    
    # Extrair alternativas
    alt_match = re.search(r"\*\*Alternativas:\*\*\s*(.*?)(?=\*\*Resolu√ß√£o:\*\*|\*\*Refer√™ncia:\*\*|##|$)", 
                         questao_text, re.DOTALL | re.IGNORECASE)
    if alt_match:
        dados["alternativas"] = alt_match.group(1).strip()
    
    # Extrair resolu√ß√£o
    resolucao_match = re.search(r"\*\*Resolu√ß√£o:\*\*\s*(.*?)(?=\*\*Refer√™ncia:\*\*|##|$)", 
                               questao_text, re.DOTALL | re.IGNORECASE)
    if resolucao_match:
        dados["resolucao"] = resolucao_match.group(1).strip()
    
    # Extrair refer√™ncia
    referencia_match = re.search(r"\*\*Refer√™ncia:\*\*\s*(.*?)(?=##|$)", 
                                questao_text, re.DOTALL | re.IGNORECASE)
    if referencia_match:
        dados["referencia"] = referencia_match.group(1).strip()
    
    return dados

def parse_prova_completa(texto):
    """Extrai todas as quest√µes e se√ß√µes da prova"""
    
    # Dividir por quest√µes
    blocos = re.split(r"\n##\s*Quest√£o", texto, flags=re.IGNORECASE)
    
    # Primeira parte √© introdu√ß√£o
    introducao = ""
    questoes = []
    
    if blocos:
        introducao = blocos[0].strip()
        
        # Processar cada quest√£o
        for i, bloco in enumerate(blocos[1:], 1):
            questao_text = f"## Quest√£o {bloco.strip()}"
            dados = parse_questao_individual(questao_text)
            
            if dados["enunciado"].strip():
                dados["numero"] = i
                questoes.append(dados)
    
    return introducao, questoes

# === CRIA√á√ÉO DE DOCUMENTOS ===
def criar_documento_prova_completo(texto, serie, tema, incluir_imagens=True):
    """Cria documento DOCX com estrutura completa"""
    try:
        document = Document()
        
        # Cabe√ßalho principal
        titulo = document.add_heading(f"PROVA DE MATEM√ÅTICA - {serie.upper()}", level=0)
        titulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        subtitulo = document.add_heading(f"Tema: {tema}", level=1)
        subtitulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        document.add_paragraph("")
        
        # Dados do aluno
        p_dados = document.add_paragraph("Data: ___/___/_____     Nome: _________________________     Turma: _____")
        p_dados.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT
        
        document.add_paragraph("")
        
        # Processar conte√∫do
        introducao, questoes = parse_prova_completa(texto)
        
        # Adicionar instru√ß√µes se existirem
        if introducao:
            # Extrair instru√ß√µes
            instrucoes_match = re.search(r"Instru√ß√µes:.*?(?=##|$)", introducao, re.DOTALL | re.IGNORECASE)
            if instrucoes_match:
                p_inst = document.add_paragraph(instrucoes_match.group(0))
                p_inst.alignment = WD_PARAGRAPH_ALIGNMENT.LEFT
                document.add_paragraph("")
        
        if not questoes:
            st.warning("‚ö†Ô∏è Nenhuma quest√£o v√°lida encontrada.")
            return None
        
        # Limpar imagens antigas
        for img in st.session_state.imagens_geradas:
            if os.path.exists(img):
                try:
                    os.remove(img)
                except:
                    pass
        st.session_state.imagens_geradas = []
        
        # QUEST√ïES COM IMAGENS CONTEXTUAIS
        for idx, questao in enumerate(questoes, start=1):
            # T√≠tulo da quest√£o
            p_titulo = document.add_paragraph()
            p_titulo.add_run(f"{idx}) ").bold = True
            p_titulo.add_run(questao["enunciado"])
            
            # GERAR IMAGEM CONTEXTUAL ESPEC√çFICA
            if incluir_imagens and questao["enunciado"]:
                with st.spinner(f"üé® Gerando imagem contextual para quest√£o {idx}..."):
                    img_file = gerar_imagem_contextual_especifica(idx, questao["enunciado"], tema)
                    
                    if img_file and os.path.exists(img_file):
                        try:
                            # Adicionar imagem ao documento
                            p_img = document.add_paragraph()
                            p_img.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
                            document.add_picture(img_file, width=Inches(5))
                            document.add_paragraph("")
                            
                            # Salvar na lista para limpeza posterior
                            st.session_state.imagens_geradas.append(img_file)
                            
                            st.success(f"‚úÖ Imagem contextual gerada para quest√£o {idx}")
                            
                        except Exception as e:
                            st.warning(f"‚ö†Ô∏è Erro ao adicionar imagem da quest√£o {idx}: {str(e)}")
                    else:
                        st.info(f"‚ÑπÔ∏è Quest√£o {idx}: N√£o necessita imagem ou erro na gera√ß√£o")
            
            # Alternativas
            if questao["alternativas"]:
                alternativas_linhas = questao["alternativas"].split('\n')
                for alt in alternativas_linhas:
                    if alt.strip():
                        document.add_paragraph(alt.strip())
            
            document.add_paragraph("")
        
        # Salvar documento
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"prova_{serie.replace(' ', '_')}_{tema.replace(' ', '_')}_{timestamp}.docx"
        document.save(nome_arquivo)
        
        return nome_arquivo
        
    except Exception as e:
        st.error(f"Erro ao criar documento: {str(e)}")
        return None

def criar_documento_gabarito(texto, serie, tema):
    """Cria documento separado com gabarito e resolu√ß√µes"""
    try:
        document = Document()
        
        # Cabe√ßalho
        titulo = document.add_heading(f"GABARITO E RESOLU√á√ïES - {serie.upper()}", level=0)
        titulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        subtitulo = document.add_heading(f"Tema: {tema}", level=1)
        subtitulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        document.add_paragraph("")
        document.add_paragraph("Resolu√ß√µes detalhadas para confer√™ncia do professor.")
        document.add_paragraph("")
        
        # Processar quest√µes
        introducao, questoes = parse_prova_completa(texto)
        
        for idx, questao in enumerate(questoes, start=1):
            # T√≠tulo da quest√£o
            p_gab = document.add_paragraph()
            p_gab.add_run(f"Quest√£o {idx}: ").bold = True
            
            # Resolu√ß√£o
            if questao["resolucao"]:
                p_gab.add_run(questao["resolucao"])
            
            # Refer√™ncia
            if questao["referencia"]:
                document.add_paragraph("")
                p_ref = document.add_paragraph()
                p_ref.add_run("Refer√™ncia: ").bold = True
                p_ref.add_run(questao["referencia"])
            
            document.add_paragraph("")
        
        # Salvar
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"gabarito_{serie.replace(' ', '_')}_{tema.replace(' ', '_')}_{timestamp}.docx"
        document.save(nome_arquivo)
        
        return nome_arquivo
        
    except Exception as e:
        st.error(f"Erro ao criar gabarito: {str(e)}")
        return None

def criar_folha_respostas_otimizada(num_questoes, serie, tema):
    """Cria folha de respostas otimizada"""
    try:
        document = Document()
        
        # Cabe√ßalho
        titulo = document.add_heading("FOLHA DE RESPOSTAS", level=0)
        titulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        subtitulo = document.add_paragraph(f"{serie} - {tema}")
        subtitulo.alignment = WD_PARAGRAPH_ALIGNMENT.CENTER
        
        document.add_paragraph("")
        
        # Dados do aluno
        document.add_paragraph("Nome: _________________________________________________ Turma: _______ Data: ________")
        document.add_paragraph("")
        
        # Instru√ß√µes
        document.add_paragraph("Instru√ß√µes: Marque apenas uma alternativa por quest√£o.")
        document.add_paragraph("")
        
        # Grid de respostas otimizado
        questoes_por_linha = min(5, num_questoes)
        linhas = (num_questoes + questoes_por_linha - 1) // questoes_por_linha
        
        for linha in range(linhas):
            p = document.add_paragraph()
            for col in range(questoes_por_linha):
                questao_num = linha * questoes_por_linha + col + 1
                if questao_num <= num_questoes:
                    p.add_run(f"{questao_num:2d}) ")
                    for letra in ['A', 'B', 'C', 'D']:
                        p.add_run(f"( {letra} ) ")
                    p.add_run("     ")
        
        # Salvar
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        nome_arquivo = f"folha_respostas_{serie.replace(' ', '_')}_{tema.replace(' ', '_')}_{timestamp}.docx"
        document.save(nome_arquivo)
        
        return nome_arquivo
        
    except Exception as e:
        st.error(f"Erro ao criar folha de respostas: {str(e)}")
        return None

# === PROMPT OTIMIZADO ===
def criar_prompt_otimizado(serie, tema, num_questoes, nivel_dificuldade):
    tempo_estimado = num_questoes * 6  # 6 min por quest√£o
    
    return f"""
Crie uma prova de matem√°tica completa para {serie} sobre o tema "{tema}" com {num_questoes} quest√µes.

‚ö†Ô∏è FORMATA√á√ÉO MATEM√ÅTICA OBRIGAT√ìRIA:
- N√ÉO use c√≥digos LaTeX como \\( \\) ou \\[ \\]
- Use s√≠mbolos Unicode diretos: ¬≤, ¬≥, ‚àö, √∑, √ó, ¬±, œÄ, Œ±, Œ≤
- Para fra√ß√µes use: (a)/(b) em vez de \\frac{{a}}{{b}}
- Para exponenciais use: x¬≤ ou x^2 (sem barras)
- Para coordenadas use: A(1, 3) sem delimitadores LaTeX
- Para ra√≠zes use: ‚àö25 ou raiz de 25

‚ö†Ô∏è REFER√äNCIAS OBRIGAT√ìRIAS:
- Cada quest√£o DEVE ter uma refer√™ncia bibliogr√°fica espec√≠fica
- Use apenas livros did√°ticos conhecidos
- Cite p√°gina espec√≠fica quando poss√≠vel
- Formate as refer√™ncias em padr√£o ABNT

FORMATO OBRIGAT√ìRIO:

# Prova de Matem√°tica - {serie}: {tema}

Instru√ß√µes: Esta prova cont√©m {num_questoes} quest√µes sobre {tema}. Leia atentamente cada quest√£o antes de responder. Marque apenas uma alternativa por quest√£o.

Tempo estimado: {tempo_estimado} minutos

## Quest√£o 1: [Tipo - N√≠vel]
**Enunciado:** [Quest√£o aqui - SEM c√≥digos LaTeX, com medidas e dados espec√≠ficos]
**Alternativas:**
a) [Op√ß√£o A - formata√ß√£o limpa]
b) [Op√ß√£o B - formata√ß√£o limpa] 
c) [Op√ß√£o C - formata√ß√£o limpa]
d) [Op√ß√£o D - formata√ß√£o limpa]
**Resolu√ß√£o:** [Explica√ß√£o detalhada com c√°lculos limpos]
**Refer√™ncia:** [Cite livro espec√≠fico - formato ABNT completo]

[Repetir para todas as {num_questoes} quest√µes]

## GABARITO E RESOLU√á√ïES
[Resolu√ß√µes detalhadas de cada quest√£o]

## REFER√äNCIAS BIBLIOGR√ÅFICAS UTILIZADAS
[Liste todas as refer√™ncias citadas, formatadas em ABNT]

CRIT√âRIOS OBRIGAT√ìRIOS:
- Cada quest√£o DEVE ter uma refer√™ncia espec√≠fica
- Formata√ß√£o matem√°tica LIMPA (sem LaTeX)
- Include medidas, √¢ngulos, coordenadas espec√≠ficas nas quest√µes
- Varie as refer√™ncias entre quest√µes
- Use apenas s√≠mbolos Unicode ou texto simples
- Garanta que todas as express√µes sejam leg√≠veis
"""

def obter_resposta_completa_do_assistant(messages):
    """Extrai conte√∫do completo das mensagens do assistant"""
    conteudo_completo = ""
    for message in messages.data:
        if message.role == "assistant":
            if hasattr(message, 'content') and message.content:
                for content_block in message.content:
                    if hasattr(content_block, 'text') and hasattr(content_block.text, 'value'):
                        conteudo_completo += content_block.text.value + "\n\n"
                    elif hasattr(content_block, 'text'):
                        conteudo_completo += str(content_block.text) + "\n\n"
    return conteudo_completo.strip()

# === INTERFACE PRINCIPAL ===
def main():
    st.title("üìö Gerador de Provas IA - Vers√£o Corrigida")
    st.markdown("*Sistema inteligente com imagens contextuais e downloads sem reinicializa√ß√£o*")
    st.markdown("---")
    
    # Sidebar - Configura√ß√µes
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes da Prova")
    
    serie = st.sidebar.selectbox(
        "üìñ S√©rie:",
        ["6¬∫ Ano", "7¬∫ Ano", "8¬∫ Ano", "9¬∫ Ano", "1¬∫ Ano EM", "2¬∫ Ano EM", "3¬∫ Ano EM"]
    )
    
    # Usar a lista extensa de temas
    tema = st.sidebar.selectbox("üí° Tema:", TEMAS_COMPLETOS[serie])
    
    # Configura√ß√µes da prova
    num_questoes = st.sidebar.slider("üìä N√∫mero de quest√µes:", 3, 10, 5)
    nivel_dificuldade = st.sidebar.selectbox(
        "‚ö° N√≠vel de Dificuldade:",
        ["F√°cil", "M√©dio", "Dif√≠cil", "Misto"]
    )
    
    tempo_estimado = num_questoes * 6
    
    # Op√ß√µes visuais
    st.sidebar.markdown("### üé® Recursos Visuais")
    incluir_imagens = st.sidebar.checkbox("üñºÔ∏è Gerar imagens contextuais", value=True)
    incluir_folha_respostas = st.sidebar.checkbox("üìù Gerar folha de respostas", value=True)
    
    # M√©tricas
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("üìä Quest√µes", num_questoes)
    with col2:
        st.metric("‚è±Ô∏è Tempo", f"{tempo_estimado} min")
    with col3:
        st.metric("üéØ N√≠vel", nivel_dificuldade)
    with col4:
        temas_disponiveis = len(TEMAS_COMPLETOS[serie])
        st.metric("üí° Temas", f"{temas_disponiveis} op√ß√µes")
    
    # Bot√£o principal de gera√ß√£o
    if st.button("üöÄ Gerar Prova Completa", type="primary"):
        
        with st.spinner("üîÑ Gerando prova inteligente..."):
            try:
                # Criar prompt otimizado
                prompt = criar_prompt_otimizado(serie, tema, num_questoes, nivel_dificuldade)
                
                # Iniciar conversa com assistente
                thread = openai.beta.threads.create()
                
                message = openai.beta.threads.messages.create(
                    thread_id=thread.id,
                    role="user", 
                    content=prompt
                )
                
                # Executar assistente
                run = openai.beta.threads.runs.create(
                    thread_id=thread.id,
                    assistant_id=ASSISTANT_ID
                )
                
                # Aguardar conclus√£o com progress bar
                progress_bar = st.progress(0)
                progress_text = st.empty()
                
                step = 0
                while run.status not in ["completed", "failed", "cancelled"]:
                    time.sleep(3)
                    run = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
                    step += 1
                    progress = min(step * 15, 95)
                    progress_bar.progress(progress)
                    progress_text.text(f"‚è≥ Processando: {run.status} - {progress}%")
                
                progress_bar.progress(100)
                progress_text.text("‚úÖ Prova gerada com sucesso!")
                
                if run.status == "completed":
                    # Obter resposta do assistant
                    messages = openai.beta.threads.messages.list(thread_id=thread.id)
                    prova_gerada = obter_resposta_completa_do_assistant(messages)
                    
                    if prova_gerada and len(prova_gerada) > 100:
                        
                        # Limpar formata√ß√£o matem√°tica
                        prova_gerada = limpar_formatacao_latex(prova_gerada)
                        
                        # SALVAR NO SESSION STATE (CORRE√á√ÉO DO BUG DE DOWNLOADS)
                        st.session_state.prova_gerada = prova_gerada
                        
                        st.success("‚úÖ Prova gerada com sucesso!")
                        
                        # Preview
                        st.markdown("### üìñ Preview da Prova")
                        with st.expander("Ver conte√∫do completo", expanded=False):
                            st.markdown(prova_gerada)
                        
                        # Gerar documentos
                        st.markdown("### üîß Gerando Documentos")
                        
                        with st.spinner("üìÑ Criando documentos..."):
                            # Gerar todos os documentos
                            nome_prova = criar_documento_prova_completo(
                                prova_gerada, serie, tema, incluir_imagens
                            )
                            
                            nome_gabarito = criar_documento_gabarito(
                                prova_gerada, serie, tema
                            )
                            
                            nome_folha = None
                            if incluir_folha_respostas:
                                nome_folha = criar_folha_respostas_otimizada(
                                    num_questoes, serie, tema
                                )
                        
                        # SALVAR DOCUMENTOS NO SESSION STATE
                        st.session_state.documentos_prontos = {
                            'prova': nome_prova,
                            'gabarito': nome_gabarito,
                            'folha': nome_folha
                        }
                        
                    else:
                        st.error("‚ùå Conte√∫do gerado est√° vazio ou muito curto.")
                else:
                    st.error(f"‚ùå Erro na gera√ß√£o: {run.status}")
                    
            except Exception as e:
                st.error(f"‚ùå Erro: {str(e)}")
    
    # SE√á√ÉO DE DOWNLOADS (SEM REINICIALIZA√á√ÉO)
    if st.session_state.prova_gerada and st.session_state.documentos_prontos:
        st.markdown("### üìÅ Downloads Dispon√≠veis")
        
        col_down1, col_down2, col_down3 = st.columns(3)
        
        # Download da Prova
        with col_down1:
            if st.session_state.documentos_prontos['prova'] and os.path.exists(st.session_state.documentos_prontos['prova']):
                with open(st.session_state.documentos_prontos['prova'], "rb") as file_obj:
                    st.download_button(
                        label="üìÑ Baixar Prova",
                        data=file_obj.read(),
                        file_name=st.session_state.documentos_prontos['prova'],
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        type="primary"
                    )
        
        # Download do Gabarito
        with col_down2:
            if st.session_state.documentos_prontos['gabarito'] and os.path.exists(st.session_state.documentos_prontos['gabarito']):
                with open(st.session_state.documentos_prontos['gabarito'], "rb") as file_obj:
                    st.download_button(
                        label="üìã Baixar Gabarito",
                        data=file_obj.read(),
                        file_name=st.session_state.documentos_prontos['gabarito'],
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        type="secondary"
                    )
        
        # Download da Folha de Respostas
        with col_down3:
            if st.session_state.documentos_prontos['folha'] and os.path.exists(st.session_state.documentos_prontos['folha']):
                with open(st.session_state.documentos_prontos['folha'], "rb") as file_obj:
                    st.download_button(
                        label="üìù Baixar Folha Respostas",
                        data=file_obj.read(),
                        file_name=st.session_state.documentos_prontos['folha'],
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        type="secondary"
                    )
        
        # Informa√ß√µes finais
        st.success("‚úÖ Todos os documentos est√£o prontos para download!")
        
        # Estat√≠sticas da prova gerada
        introducao, questoes = parse_prova_completa(st.session_state.prova_gerada)
        num_questoes_geradas = len(questoes)
        imagens_geradas = len(st.session_state.imagens_geradas)
        
        st.info(f"""
        üìä **Resumo da Prova Gerada:**
        ‚Ä¢ {num_questoes_geradas} quest√µes de {nivel_dificuldade.lower()} dificuldade
        ‚Ä¢ {imagens_geradas} imagens contextuais geradas
        ‚Ä¢ Tempo estimado: {tempo_estimado} minutos
        ‚Ä¢ S√©rie: {serie} | Tema: {tema}
        """)
        
        # Bot√£o para limpar e gerar nova prova
        if st.button("üîÑ Gerar Nova Prova", type="secondary"):
            # Limpar session state
            st.session_state.prova_gerada = None
            st.session_state.documentos_prontos = None
            
            # Limpar imagens
            for img in st.session_state.imagens_geradas:
                if os.path.exists(img):
                    try:
                        os.remove(img)
                    except:
                        pass
            st.session_state.imagens_geradas = []
            
            st.rerun()
    
    # Footer
    st.markdown("---")
    st.markdown("""
    
        ü§ñ Gerador de Provas IA - Vers√£o Corrigida
        ‚ú® Imagens contextuais ‚Ä¢ üìö Refer√™ncias ABNT ‚Ä¢ üîß Downloads sem reinicializa√ß√£o
    
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
